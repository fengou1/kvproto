// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: recoverypb.proto

package recovery

import (
	"context"
	"fmt"
	"io"
	"math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RegionMeta struct {
	RegionId             uint64   `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	AppliedIndex         uint64   `protobuf:"varint,2,opt,name=applied_index,json=appliedIndex,proto3" json:"applied_index,omitempty"`
	LastIndex            uint64   `protobuf:"varint,3,opt,name=last_index,json=lastIndex,proto3" json:"last_index,omitempty"`
	Term                 uint64   `protobuf:"varint,4,opt,name=term,proto3" json:"term,omitempty"`
	Version              uint64   `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	Tombstone            bool     `protobuf:"varint,6,opt,name=tombstone,proto3" json:"tombstone,omitempty"`
	StartKey             []byte   `protobuf:"bytes,7,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey               []byte   `protobuf:"bytes,8,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegionMeta) Reset()         { *m = RegionMeta{} }
func (m *RegionMeta) String() string { return proto.CompactTextString(m) }
func (*RegionMeta) ProtoMessage()    {}
func (*RegionMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_f78c5bd5d2e42cce, []int{0}
}
func (m *RegionMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionMeta.Merge(m, src)
}
func (m *RegionMeta) XXX_Size() int {
	return m.Size()
}
func (m *RegionMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionMeta.DiscardUnknown(m)
}

var xxx_messageInfo_RegionMeta proto.InternalMessageInfo

func (m *RegionMeta) GetRegionId() uint64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *RegionMeta) GetAppliedIndex() uint64 {
	if m != nil {
		return m.AppliedIndex
	}
	return 0
}

func (m *RegionMeta) GetLastIndex() uint64 {
	if m != nil {
		return m.LastIndex
	}
	return 0
}

func (m *RegionMeta) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RegionMeta) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RegionMeta) GetTombstone() bool {
	if m != nil {
		return m.Tombstone
	}
	return false
}

func (m *RegionMeta) GetStartKey() []byte {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *RegionMeta) GetEndKey() []byte {
	if m != nil {
		return m.EndKey
	}
	return nil
}

type RegionRecover struct {
	RegionId             uint64   `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Term                 uint64   `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	AsLeader             bool     `protobuf:"varint,3,opt,name=as_leader,json=asLeader,proto3" json:"as_leader,omitempty"`
	Tombstone            bool     `protobuf:"varint,4,opt,name=tombstone,proto3" json:"tombstone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegionRecover) Reset()         { *m = RegionRecover{} }
func (m *RegionRecover) String() string { return proto.CompactTextString(m) }
func (*RegionRecover) ProtoMessage()    {}
func (*RegionRecover) Descriptor() ([]byte, []int) {
	return fileDescriptor_f78c5bd5d2e42cce, []int{1}
}
func (m *RegionRecover) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionRecover) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionRecover.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionRecover) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionRecover.Merge(m, src)
}
func (m *RegionRecover) XXX_Size() int {
	return m.Size()
}
func (m *RegionRecover) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionRecover.DiscardUnknown(m)
}

var xxx_messageInfo_RegionRecover proto.InternalMessageInfo

func (m *RegionRecover) GetRegionId() uint64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *RegionRecover) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RegionRecover) GetAsLeader() bool {
	if m != nil {
		return m.AsLeader
	}
	return false
}

func (m *RegionRecover) GetTombstone() bool {
	if m != nil {
		return m.Tombstone
	}
	return false
}

type CloseRequest struct {
	Workdone             bool     `protobuf:"varint,1,opt,name=workdone,proto3" json:"workdone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseRequest) Reset()         { *m = CloseRequest{} }
func (m *CloseRequest) String() string { return proto.CompactTextString(m) }
func (*CloseRequest) ProtoMessage()    {}
func (*CloseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f78c5bd5d2e42cce, []int{2}
}
func (m *CloseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseRequest.Merge(m, src)
}
func (m *CloseRequest) XXX_Size() int {
	return m.Size()
}
func (m *CloseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloseRequest proto.InternalMessageInfo

func (m *CloseRequest) GetWorkdone() bool {
	if m != nil {
		return m.Workdone
	}
	return false
}

type CloseReply struct {
	Ok                   string   `protobuf:"bytes,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseReply) Reset()         { *m = CloseReply{} }
func (m *CloseReply) String() string { return proto.CompactTextString(m) }
func (*CloseReply) ProtoMessage()    {}
func (*CloseReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f78c5bd5d2e42cce, []int{3}
}
func (m *CloseReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloseReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseReply.Merge(m, src)
}
func (m *CloseReply) XXX_Size() int {
	return m.Size()
}
func (m *CloseReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseReply.DiscardUnknown(m)
}

var xxx_messageInfo_CloseReply proto.InternalMessageInfo

func (m *CloseReply) GetOk() string {
	if m != nil {
		return m.Ok
	}
	return ""
}

type ResolvedRequest struct {
	Start                uint64   `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolvedRequest) Reset()         { *m = ResolvedRequest{} }
func (m *ResolvedRequest) String() string { return proto.CompactTextString(m) }
func (*ResolvedRequest) ProtoMessage()    {}
func (*ResolvedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f78c5bd5d2e42cce, []int{4}
}
func (m *ResolvedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolvedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolvedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolvedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolvedRequest.Merge(m, src)
}
func (m *ResolvedRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResolvedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolvedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResolvedRequest proto.InternalMessageInfo

func (m *ResolvedRequest) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

type ResolvedReply struct {
	ResolvedTs           uint64   `protobuf:"varint,1,opt,name=resolved_ts,json=resolvedTs,proto3" json:"resolved_ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolvedReply) Reset()         { *m = ResolvedReply{} }
func (m *ResolvedReply) String() string { return proto.CompactTextString(m) }
func (*ResolvedReply) ProtoMessage()    {}
func (*ResolvedReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f78c5bd5d2e42cce, []int{5}
}
func (m *ResolvedReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolvedReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolvedReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolvedReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolvedReply.Merge(m, src)
}
func (m *ResolvedReply) XXX_Size() int {
	return m.Size()
}
func (m *ResolvedReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolvedReply.DiscardUnknown(m)
}

var xxx_messageInfo_ResolvedReply proto.InternalMessageInfo

func (m *ResolvedReply) GetResolvedTs() uint64 {
	if m != nil {
		return m.ResolvedTs
	}
	return 0
}

func init() {
	proto.RegisterType((*RegionMeta)(nil), "recovery.RegionMeta")
	proto.RegisterType((*RegionRecover)(nil), "recovery.RegionRecover")
	proto.RegisterType((*CloseRequest)(nil), "recovery.CloseRequest")
	proto.RegisterType((*CloseReply)(nil), "recovery.CloseReply")
	proto.RegisterType((*ResolvedRequest)(nil), "recovery.ResolvedRequest")
	proto.RegisterType((*ResolvedReply)(nil), "recovery.ResolvedReply")
}

func init() { proto.RegisterFile("recoverypb.proto", fileDescriptor_f78c5bd5d2e42cce) }

var fileDescriptor_f78c5bd5d2e42cce = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0xeb, 0xd2, 0x3f, 0xc9, 0xd0, 0xa5, 0xc8, 0x8a, 0xd8, 0x90, 0x5d, 0x4a, 0x15, 0x0e,
	0x54, 0x1c, 0xca, 0x0a, 0x0e, 0xdc, 0x01, 0x21, 0xad, 0x16, 0x2e, 0x16, 0xf7, 0xc8, 0x5d, 0x8f,
	0xaa, 0xa8, 0xd9, 0x38, 0xd8, 0xde, 0x42, 0xc4, 0x8b, 0xf0, 0x08, 0x3c, 0x0a, 0x47, 0xb8, 0x71,
	0x44, 0xe5, 0x01, 0x78, 0x05, 0x14, 0xdb, 0xa1, 0x7f, 0x90, 0xf6, 0x36, 0xf3, 0x9b, 0x4f, 0x93,
	0xef, 0x1b, 0x39, 0x70, 0x57, 0xe1, 0xa5, 0x5c, 0xa3, 0xaa, 0xab, 0xc5, 0xbc, 0x52, 0xd2, 0x48,
	0x1a, 0xb4, 0x24, 0x89, 0x96, 0x72, 0x29, 0x2d, 0x7c, 0xda, 0x54, 0x6e, 0x9e, 0x8c, 0xd5, 0xb5,
	0x36, 0xb6, 0x74, 0x20, 0xfd, 0x43, 0x00, 0x18, 0x2e, 0x73, 0x59, 0xbe, 0x43, 0xc3, 0xe9, 0x09,
	0x84, 0xca, 0x76, 0x59, 0x2e, 0x62, 0x32, 0x25, 0xb3, 0x1e, 0x0b, 0x1c, 0x38, 0x17, 0xf4, 0x11,
	0x1c, 0xf1, 0xaa, 0x2a, 0x72, 0x14, 0x59, 0x5e, 0x0a, 0xfc, 0x14, 0x77, 0xad, 0x60, 0xe4, 0xe1,
	0x79, 0xc3, 0xe8, 0x03, 0x80, 0x82, 0x6b, 0xe3, 0x15, 0xb7, 0xac, 0x22, 0x6c, 0x88, 0x1b, 0x53,
	0xe8, 0x19, 0x54, 0x57, 0x71, 0xcf, 0x0e, 0x6c, 0x4d, 0x63, 0x18, 0xae, 0x51, 0xe9, 0x5c, 0x96,
	0x71, 0xdf, 0xe2, 0xb6, 0xa5, 0xa7, 0x10, 0x1a, 0x79, 0xb5, 0xd0, 0x46, 0x96, 0x18, 0x0f, 0xa6,
	0x64, 0x16, 0xb0, 0x2d, 0x68, 0xcc, 0x6a, 0xc3, 0x95, 0xc9, 0x56, 0x58, 0xc7, 0xc3, 0x29, 0x99,
	0x8d, 0x58, 0x60, 0xc1, 0x05, 0xd6, 0xf4, 0x18, 0x86, 0x58, 0x0a, 0x3b, 0x0a, 0xec, 0x68, 0x80,
	0xa5, 0xb8, 0xc0, 0x3a, 0xfd, 0x0c, 0x47, 0x2e, 0x30, 0x73, 0xa7, 0xba, 0x39, 0x73, 0xeb, 0xb7,
	0xbb, 0xe3, 0xf7, 0x04, 0x42, 0xae, 0xb3, 0x02, 0xb9, 0x40, 0x65, 0x13, 0x06, 0x2c, 0xe0, 0xfa,
	0xad, 0xed, 0xf7, 0x2d, 0xf7, 0x0e, 0x2c, 0xa7, 0x4f, 0x60, 0xf4, 0xaa, 0x90, 0x1a, 0x19, 0x7e,
	0xb8, 0x46, 0x6d, 0x68, 0x02, 0xc1, 0x47, 0xa9, 0x56, 0xa2, 0x11, 0x13, 0xb7, 0xa9, 0xed, 0xd3,
	0x53, 0x00, 0xaf, 0xad, 0x8a, 0x9a, 0xde, 0x81, 0xae, 0x5c, 0x59, 0x4d, 0xc8, 0xba, 0x72, 0x95,
	0x3e, 0x86, 0x31, 0x43, 0x2d, 0x8b, 0x35, 0x8a, 0x76, 0x59, 0x04, 0x7d, 0x1b, 0xdf, 0x87, 0x70,
	0x4d, 0x7a, 0xd6, 0xe4, 0x6d, 0x85, 0xcd, 0xa6, 0x87, 0x70, 0x5b, 0x79, 0x90, 0x19, 0xed, 0xc5,
	0xd0, 0xa2, 0xf7, 0xfa, 0xd9, 0x0f, 0x02, 0xff, 0xde, 0x11, 0x7d, 0x03, 0x63, 0x5f, 0x67, 0xee,
	0x28, 0x9a, 0x46, 0xf3, 0x76, 0x3a, 0xdf, 0x3e, 0x9d, 0xe4, 0xf8, 0x90, 0xfa, 0xfb, 0xa6, 0x9d,
	0x19, 0x39, 0x23, 0xf4, 0x05, 0xf4, 0x2f, 0x9b, 0x34, 0xf4, 0xde, 0x56, 0xb7, 0x7b, 0x8a, 0x24,
	0xfa, 0x8f, 0x57, 0x45, 0x9d, 0x76, 0xe8, 0x6b, 0x18, 0x79, 0x6f, 0x99, 0xe0, 0x86, 0xd3, 0xfb,
	0xbb, 0xdf, 0xd9, 0x3b, 0xc0, 0xbe, 0x85, 0x9d, 0xc8, 0x69, 0xe7, 0x65, 0xf4, 0xf3, 0x6b, 0x40,
	0xbe, 0x6d, 0x26, 0xe4, 0xfb, 0x66, 0x42, 0x7e, 0x6d, 0x26, 0xe4, 0xcb, 0xef, 0x49, 0x67, 0x31,
	0xb0, 0x3f, 0xc1, 0xf3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x4d, 0x8e, 0x1f, 0x49, 0x03,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RecoveryClient is the client API for Recovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecoveryClient interface {
	RecoverRegions(ctx context.Context, opts ...grpc.CallOption) (Recovery_RecoverRegionsClient, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseReply, error)
	ResolveData(ctx context.Context, in *ResolvedRequest, opts ...grpc.CallOption) (*ResolvedReply, error)
}

type recoveryClient struct {
	cc *grpc.ClientConn
}

func NewRecoveryClient(cc *grpc.ClientConn) RecoveryClient {
	return &recoveryClient{cc}
}

func (c *recoveryClient) RecoverRegions(ctx context.Context, opts ...grpc.CallOption) (Recovery_RecoverRegionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Recovery_serviceDesc.Streams[0], "/recovery.recovery/recover_regions", opts...)
	if err != nil {
		return nil, err
	}
	x := &recoveryRecoverRegionsClient{stream}
	return x, nil
}

type Recovery_RecoverRegionsClient interface {
	Send(*RegionMeta) error
	Recv() (*RegionRecover, error)
	grpc.ClientStream
}

type recoveryRecoverRegionsClient struct {
	grpc.ClientStream
}

func (x *recoveryRecoverRegionsClient) Send(m *RegionMeta) error {
	return x.ClientStream.SendMsg(m)
}

func (x *recoveryRecoverRegionsClient) Recv() (*RegionRecover, error) {
	m := new(RegionRecover)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *recoveryClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseReply, error) {
	out := new(CloseReply)
	err := c.cc.Invoke(ctx, "/recovery.recovery/close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recoveryClient) ResolveData(ctx context.Context, in *ResolvedRequest, opts ...grpc.CallOption) (*ResolvedReply, error) {
	out := new(ResolvedReply)
	err := c.cc.Invoke(ctx, "/recovery.recovery/resolve_data", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecoveryServer is the server API for Recovery service.
type RecoveryServer interface {
	RecoverRegions(Recovery_RecoverRegionsServer) error
	Close(context.Context, *CloseRequest) (*CloseReply, error)
	ResolveData(context.Context, *ResolvedRequest) (*ResolvedReply, error)
}

// UnimplementedRecoveryServer can be embedded to have forward compatible implementations.
type UnimplementedRecoveryServer struct {
}

func (*UnimplementedRecoveryServer) RecoverRegions(srv Recovery_RecoverRegionsServer) error {
	return status.Errorf(codes.Unimplemented, "method RecoverRegions not implemented")
}
func (*UnimplementedRecoveryServer) Close(ctx context.Context, req *CloseRequest) (*CloseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedRecoveryServer) ResolveData(ctx context.Context, req *ResolvedRequest) (*ResolvedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveData not implemented")
}

func RegisterRecoveryServer(s *grpc.Server, srv RecoveryServer) {
	s.RegisterService(&_Recovery_serviceDesc, srv)
}

func _Recovery_RecoverRegions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RecoveryServer).RecoverRegions(&recoveryRecoverRegionsServer{stream})
}

type Recovery_RecoverRegionsServer interface {
	Send(*RegionRecover) error
	Recv() (*RegionMeta, error)
	grpc.ServerStream
}

type recoveryRecoverRegionsServer struct {
	grpc.ServerStream
}

func (x *recoveryRecoverRegionsServer) Send(m *RegionRecover) error {
	return x.ServerStream.SendMsg(m)
}

func (x *recoveryRecoverRegionsServer) Recv() (*RegionMeta, error) {
	m := new(RegionMeta)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Recovery_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecoveryServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recovery.recovery/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecoveryServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recovery_ResolveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolvedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecoveryServer).ResolveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recovery.recovery/ResolveData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecoveryServer).ResolveData(ctx, req.(*ResolvedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Recovery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recovery.recovery",
	HandlerType: (*RecoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "close",
			Handler:    _Recovery_Close_Handler,
		},
		{
			MethodName: "resolve_data",
			Handler:    _Recovery_ResolveData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "recover_regions",
			Handler:       _Recovery_RecoverRegions_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "recoverypb.proto",
}

func (m *RegionMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EndKey) > 0 {
		i -= len(m.EndKey)
		copy(dAtA[i:], m.EndKey)
		i = encodeVarintRecoverypb(dAtA, i, uint64(len(m.EndKey)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.StartKey) > 0 {
		i -= len(m.StartKey)
		copy(dAtA[i:], m.StartKey)
		i = encodeVarintRecoverypb(dAtA, i, uint64(len(m.StartKey)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Tombstone {
		i--
		if m.Tombstone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Version != 0 {
		i = encodeVarintRecoverypb(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x28
	}
	if m.Term != 0 {
		i = encodeVarintRecoverypb(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x20
	}
	if m.LastIndex != 0 {
		i = encodeVarintRecoverypb(dAtA, i, uint64(m.LastIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.AppliedIndex != 0 {
		i = encodeVarintRecoverypb(dAtA, i, uint64(m.AppliedIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.RegionId != 0 {
		i = encodeVarintRecoverypb(dAtA, i, uint64(m.RegionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RegionRecover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionRecover) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionRecover) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Tombstone {
		i--
		if m.Tombstone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.AsLeader {
		i--
		if m.AsLeader {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Term != 0 {
		i = encodeVarintRecoverypb(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x10
	}
	if m.RegionId != 0 {
		i = encodeVarintRecoverypb(dAtA, i, uint64(m.RegionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CloseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Workdone {
		i--
		if m.Workdone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CloseReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloseReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ok) > 0 {
		i -= len(m.Ok)
		copy(dAtA[i:], m.Ok)
		i = encodeVarintRecoverypb(dAtA, i, uint64(len(m.Ok)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResolvedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolvedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolvedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Start != 0 {
		i = encodeVarintRecoverypb(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResolvedReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolvedReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolvedReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ResolvedTs != 0 {
		i = encodeVarintRecoverypb(dAtA, i, uint64(m.ResolvedTs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRecoverypb(dAtA []byte, offset int, v uint64) int {
	offset -= sovRecoverypb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegionMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegionId != 0 {
		n += 1 + sovRecoverypb(uint64(m.RegionId))
	}
	if m.AppliedIndex != 0 {
		n += 1 + sovRecoverypb(uint64(m.AppliedIndex))
	}
	if m.LastIndex != 0 {
		n += 1 + sovRecoverypb(uint64(m.LastIndex))
	}
	if m.Term != 0 {
		n += 1 + sovRecoverypb(uint64(m.Term))
	}
	if m.Version != 0 {
		n += 1 + sovRecoverypb(uint64(m.Version))
	}
	if m.Tombstone {
		n += 2
	}
	l = len(m.StartKey)
	if l > 0 {
		n += 1 + l + sovRecoverypb(uint64(l))
	}
	l = len(m.EndKey)
	if l > 0 {
		n += 1 + l + sovRecoverypb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegionRecover) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegionId != 0 {
		n += 1 + sovRecoverypb(uint64(m.RegionId))
	}
	if m.Term != 0 {
		n += 1 + sovRecoverypb(uint64(m.Term))
	}
	if m.AsLeader {
		n += 2
	}
	if m.Tombstone {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CloseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Workdone {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CloseReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ok)
	if l > 0 {
		n += 1 + l + sovRecoverypb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResolvedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Start != 0 {
		n += 1 + sovRecoverypb(uint64(m.Start))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResolvedReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResolvedTs != 0 {
		n += 1 + sovRecoverypb(uint64(m.ResolvedTs))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRecoverypb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRecoverypb(x uint64) (n int) {
	return sovRecoverypb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegionMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecoverypb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedIndex", wireType)
			}
			m.AppliedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppliedIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastIndex", wireType)
			}
			m.LastIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tombstone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tombstone = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecoverypb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecoverypb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = append(m.StartKey[:0], dAtA[iNdEx:postIndex]...)
			if m.StartKey == nil {
				m.StartKey = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecoverypb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecoverypb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = append(m.EndKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EndKey == nil {
				m.EndKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecoverypb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecoverypb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionRecover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecoverypb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionRecover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionRecover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsLeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AsLeader = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tombstone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tombstone = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRecoverypb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecoverypb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecoverypb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workdone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Workdone = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRecoverypb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecoverypb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecoverypb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecoverypb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecoverypb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ok = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecoverypb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecoverypb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolvedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecoverypb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolvedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolvedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecoverypb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecoverypb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolvedReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecoverypb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolvedReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolvedReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedTs", wireType)
			}
			m.ResolvedTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolvedTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecoverypb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecoverypb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecoverypb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecoverypb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecoverypb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRecoverypb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRecoverypb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRecoverypb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecoverypb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRecoverypb = fmt.Errorf("proto: unexpected end of group")
)
