// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: recoverypb.proto

package recovery

import (
	"context"
	"fmt"
	"io"
	"math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReadRegionMetaRequest struct {
	Workdone             bool     `protobuf:"varint,1,opt,name=workdone,proto3" json:"workdone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadRegionMetaRequest) Reset()         { *m = ReadRegionMetaRequest{} }
func (m *ReadRegionMetaRequest) String() string { return proto.CompactTextString(m) }
func (*ReadRegionMetaRequest) ProtoMessage()    {}
func (*ReadRegionMetaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f78c5bd5d2e42cce, []int{0}
}
func (m *ReadRegionMetaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadRegionMetaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadRegionMetaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadRegionMetaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadRegionMetaRequest.Merge(m, src)
}
func (m *ReadRegionMetaRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReadRegionMetaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadRegionMetaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadRegionMetaRequest proto.InternalMessageInfo

func (m *ReadRegionMetaRequest) GetWorkdone() bool {
	if m != nil {
		return m.Workdone
	}
	return false
}

type ReadRegionMetaResponse struct {
	RegionId             uint64   `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	AppliedIndex         uint64   `protobuf:"varint,2,opt,name=applied_index,json=appliedIndex,proto3" json:"applied_index,omitempty"`
	LastIndex            uint64   `protobuf:"varint,3,opt,name=last_index,json=lastIndex,proto3" json:"last_index,omitempty"`
	Term                 uint64   `protobuf:"varint,4,opt,name=term,proto3" json:"term,omitempty"`
	Version              uint64   `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	Tombstone            bool     `protobuf:"varint,6,opt,name=tombstone,proto3" json:"tombstone,omitempty"`
	StartKey             []byte   `protobuf:"bytes,7,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey               []byte   `protobuf:"bytes,8,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadRegionMetaResponse) Reset()         { *m = ReadRegionMetaResponse{} }
func (m *ReadRegionMetaResponse) String() string { return proto.CompactTextString(m) }
func (*ReadRegionMetaResponse) ProtoMessage()    {}
func (*ReadRegionMetaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f78c5bd5d2e42cce, []int{1}
}
func (m *ReadRegionMetaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadRegionMetaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadRegionMetaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadRegionMetaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadRegionMetaResponse.Merge(m, src)
}
func (m *ReadRegionMetaResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReadRegionMetaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadRegionMetaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadRegionMetaResponse proto.InternalMessageInfo

func (m *ReadRegionMetaResponse) GetRegionId() uint64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *ReadRegionMetaResponse) GetAppliedIndex() uint64 {
	if m != nil {
		return m.AppliedIndex
	}
	return 0
}

func (m *ReadRegionMetaResponse) GetLastIndex() uint64 {
	if m != nil {
		return m.LastIndex
	}
	return 0
}

func (m *ReadRegionMetaResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *ReadRegionMetaResponse) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ReadRegionMetaResponse) GetTombstone() bool {
	if m != nil {
		return m.Tombstone
	}
	return false
}

func (m *ReadRegionMetaResponse) GetStartKey() []byte {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *ReadRegionMetaResponse) GetEndKey() []byte {
	if m != nil {
		return m.EndKey
	}
	return nil
}

type RecoveryCmdRequest struct {
	RegionId             uint64   `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Term                 uint64   `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	AsLeader             bool     `protobuf:"varint,3,opt,name=as_leader,json=asLeader,proto3" json:"as_leader,omitempty"`
	Tombstone            bool     `protobuf:"varint,4,opt,name=tombstone,proto3" json:"tombstone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecoveryCmdRequest) Reset()         { *m = RecoveryCmdRequest{} }
func (m *RecoveryCmdRequest) String() string { return proto.CompactTextString(m) }
func (*RecoveryCmdRequest) ProtoMessage()    {}
func (*RecoveryCmdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f78c5bd5d2e42cce, []int{2}
}
func (m *RecoveryCmdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecoveryCmdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecoveryCmdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecoveryCmdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecoveryCmdRequest.Merge(m, src)
}
func (m *RecoveryCmdRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecoveryCmdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecoveryCmdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecoveryCmdRequest proto.InternalMessageInfo

func (m *RecoveryCmdRequest) GetRegionId() uint64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *RecoveryCmdRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RecoveryCmdRequest) GetAsLeader() bool {
	if m != nil {
		return m.AsLeader
	}
	return false
}

func (m *RecoveryCmdRequest) GetTombstone() bool {
	if m != nil {
		return m.Tombstone
	}
	return false
}

type RecoveryCmdResponse struct {
	Done                 bool     `protobuf:"varint,1,opt,name=done,proto3" json:"done,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecoveryCmdResponse) Reset()         { *m = RecoveryCmdResponse{} }
func (m *RecoveryCmdResponse) String() string { return proto.CompactTextString(m) }
func (*RecoveryCmdResponse) ProtoMessage()    {}
func (*RecoveryCmdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f78c5bd5d2e42cce, []int{3}
}
func (m *RecoveryCmdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecoveryCmdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecoveryCmdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecoveryCmdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecoveryCmdResponse.Merge(m, src)
}
func (m *RecoveryCmdResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecoveryCmdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecoveryCmdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecoveryCmdResponse proto.InternalMessageInfo

func (m *RecoveryCmdResponse) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

// check if raft fsm applied index >= GetRaftStatusRequest.commit_index
type GetRaftStatusRequest struct {
	CommitIndex          bool     `protobuf:"varint,1,opt,name=commit_index,json=commitIndex,proto3" json:"commit_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRaftStatusRequest) Reset()         { *m = GetRaftStatusRequest{} }
func (m *GetRaftStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetRaftStatusRequest) ProtoMessage()    {}
func (*GetRaftStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f78c5bd5d2e42cce, []int{4}
}
func (m *GetRaftStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRaftStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRaftStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRaftStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRaftStatusRequest.Merge(m, src)
}
func (m *GetRaftStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRaftStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRaftStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRaftStatusRequest proto.InternalMessageInfo

func (m *GetRaftStatusRequest) GetCommitIndex() bool {
	if m != nil {
		return m.CommitIndex
	}
	return false
}

type GetRaftStatusResponse struct {
	Done                 bool     `protobuf:"varint,1,opt,name=done,proto3" json:"done,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRaftStatusResponse) Reset()         { *m = GetRaftStatusResponse{} }
func (m *GetRaftStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GetRaftStatusResponse) ProtoMessage()    {}
func (*GetRaftStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f78c5bd5d2e42cce, []int{5}
}
func (m *GetRaftStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRaftStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRaftStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRaftStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRaftStatusResponse.Merge(m, src)
}
func (m *GetRaftStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRaftStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRaftStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRaftStatusResponse proto.InternalMessageInfo

func (m *GetRaftStatusResponse) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

type ResolvedRequest struct {
	ResolvedTs           uint64   `protobuf:"varint,1,opt,name=resolved_ts,json=resolvedTs,proto3" json:"resolved_ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolvedRequest) Reset()         { *m = ResolvedRequest{} }
func (m *ResolvedRequest) String() string { return proto.CompactTextString(m) }
func (*ResolvedRequest) ProtoMessage()    {}
func (*ResolvedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f78c5bd5d2e42cce, []int{6}
}
func (m *ResolvedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolvedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolvedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolvedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolvedRequest.Merge(m, src)
}
func (m *ResolvedRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResolvedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolvedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResolvedRequest proto.InternalMessageInfo

func (m *ResolvedRequest) GetResolvedTs() uint64 {
	if m != nil {
		return m.ResolvedTs
	}
	return 0
}

type ResolvedResponse struct {
	Done                 bool     `protobuf:"varint,1,opt,name=done,proto3" json:"done,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolvedResponse) Reset()         { *m = ResolvedResponse{} }
func (m *ResolvedResponse) String() string { return proto.CompactTextString(m) }
func (*ResolvedResponse) ProtoMessage()    {}
func (*ResolvedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f78c5bd5d2e42cce, []int{7}
}
func (m *ResolvedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolvedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolvedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolvedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolvedResponse.Merge(m, src)
}
func (m *ResolvedResponse) XXX_Size() int {
	return m.Size()
}
func (m *ResolvedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolvedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResolvedResponse proto.InternalMessageInfo

func (m *ResolvedResponse) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func init() {
	proto.RegisterType((*ReadRegionMetaRequest)(nil), "recovery.ReadRegionMetaRequest")
	proto.RegisterType((*ReadRegionMetaResponse)(nil), "recovery.ReadRegionMetaResponse")
	proto.RegisterType((*RecoveryCmdRequest)(nil), "recovery.RecoveryCmdRequest")
	proto.RegisterType((*RecoveryCmdResponse)(nil), "recovery.RecoveryCmdResponse")
	proto.RegisterType((*GetRaftStatusRequest)(nil), "recovery.GetRaftStatusRequest")
	proto.RegisterType((*GetRaftStatusResponse)(nil), "recovery.GetRaftStatusResponse")
	proto.RegisterType((*ResolvedRequest)(nil), "recovery.ResolvedRequest")
	proto.RegisterType((*ResolvedResponse)(nil), "recovery.ResolvedResponse")
}

func init() { proto.RegisterFile("recoverypb.proto", fileDescriptor_f78c5bd5d2e42cce) }

var fileDescriptor_f78c5bd5d2e42cce = []byte{
	// 522 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x4d, 0x8f, 0x12, 0x41,
	0x10, 0xdd, 0x5e, 0x11, 0x86, 0x02, 0x65, 0xd3, 0xb2, 0x3a, 0xce, 0xee, 0x02, 0x8e, 0x89, 0xc1,
	0x98, 0xa0, 0xd9, 0x3d, 0x79, 0x75, 0x4d, 0x0c, 0x41, 0x3d, 0xb4, 0x9b, 0x78, 0x24, 0x0d, 0x5d,
	0xe2, 0x04, 0x98, 0xc6, 0xee, 0x06, 0xe5, 0xe6, 0xcf, 0xf0, 0x27, 0xf8, 0x53, 0x3c, 0x7a, 0xf0,
	0xe0, 0xd1, 0xe0, 0xcf, 0xf0, 0x62, 0xa6, 0x67, 0x9a, 0xaf, 0xc0, 0xde, 0xba, 0xdf, 0xab, 0x57,
	0xf3, 0xea, 0x55, 0x67, 0xe0, 0x48, 0x61, 0x5f, 0xce, 0x50, 0xcd, 0x27, 0xbd, 0xd6, 0x44, 0x49,
	0x23, 0xa9, 0xe7, 0x90, 0xa0, 0x3a, 0x90, 0x03, 0x69, 0xc1, 0xa7, 0xc9, 0x29, 0xe5, 0x83, 0x8a,
	0x9a, 0x6a, 0x63, 0x8f, 0x29, 0x10, 0x5e, 0xc0, 0x31, 0x43, 0x2e, 0x18, 0x0e, 0x22, 0x19, 0xbf,
	0x41, 0xc3, 0x19, 0x7e, 0x9a, 0xa2, 0x36, 0x34, 0x00, 0xef, 0xb3, 0x54, 0x43, 0x21, 0x63, 0xf4,
	0x49, 0x83, 0x34, 0x3d, 0xb6, 0xbc, 0x87, 0xff, 0x08, 0xdc, 0xdd, 0x56, 0xe9, 0x89, 0x8c, 0x35,
	0xd2, 0x13, 0x28, 0x2a, 0x8b, 0x76, 0x23, 0x61, 0x75, 0x39, 0xe6, 0xa5, 0x40, 0x5b, 0xd0, 0x87,
	0x70, 0x8b, 0x4f, 0x26, 0xa3, 0x08, 0x45, 0x37, 0x8a, 0x05, 0x7e, 0xf1, 0x0f, 0x6d, 0x41, 0x39,
	0x03, 0xdb, 0x09, 0x46, 0xcf, 0x00, 0x46, 0x5c, 0x9b, 0xac, 0xe2, 0x86, 0xad, 0x28, 0x26, 0x48,
	0x4a, 0x53, 0xc8, 0x19, 0x54, 0x63, 0x3f, 0x67, 0x09, 0x7b, 0xa6, 0x3e, 0x14, 0x66, 0xa8, 0x74,
	0x24, 0x63, 0xff, 0xa6, 0x85, 0xdd, 0x95, 0x9e, 0x42, 0xd1, 0xc8, 0x71, 0x4f, 0x9b, 0x64, 0x8c,
	0xbc, 0x1d, 0x63, 0x05, 0x24, 0x66, 0xb5, 0xe1, 0xca, 0x74, 0x87, 0x38, 0xf7, 0x0b, 0x0d, 0xd2,
	0x2c, 0x33, 0xcf, 0x02, 0x1d, 0x9c, 0xd3, 0x7b, 0x50, 0xc0, 0x58, 0x58, 0xca, 0xb3, 0x54, 0x1e,
	0x63, 0xd1, 0xc1, 0x79, 0xf8, 0x95, 0x00, 0x65, 0x59, 0xcc, 0x97, 0x63, 0xe1, 0x02, 0xbb, 0x76,
	0x72, 0xe7, 0xfa, 0x70, 0xcd, 0xf5, 0x09, 0x14, 0xb9, 0xee, 0x8e, 0x90, 0x0b, 0x54, 0x76, 0x4e,
	0x8f, 0x79, 0x5c, 0xbf, 0xb6, 0xf7, 0x4d, 0xe3, 0xb9, 0x2d, 0xe3, 0xe1, 0x63, 0xb8, 0xb3, 0xe1,
	0x20, 0x0b, 0x9f, 0x42, 0x6e, 0x6d, 0x5f, 0xf6, 0x1c, 0x3e, 0x87, 0xea, 0x2b, 0x34, 0x8c, 0x7f,
	0x30, 0xef, 0x0c, 0x37, 0x53, 0xed, 0xec, 0x3e, 0x80, 0x72, 0x5f, 0x8e, 0xc7, 0x91, 0x0b, 0x3a,
	0xd5, 0x94, 0x52, 0xcc, 0x46, 0x1d, 0x3e, 0x81, 0xe3, 0x2d, 0xe9, 0x35, 0xdf, 0x39, 0x87, 0x0a,
	0x43, 0x2d, 0x47, 0x33, 0x5c, 0x26, 0x52, 0x87, 0x92, 0xca, 0xa0, 0xae, 0xd1, 0x59, 0x26, 0xe0,
	0xa0, 0x2b, 0x1d, 0x3e, 0x82, 0xa3, 0x95, 0x66, 0x7f, 0xef, 0xf3, 0x5f, 0x87, 0xb0, 0x7c, 0xd8,
	0xf4, 0x3d, 0xdc, 0xde, 0x7c, 0x7b, 0xb4, 0xde, 0x72, 0x64, 0x6b, 0xe7, 0x5b, 0x0e, 0x1a, 0xfb,
	0x0b, 0xd2, 0xaf, 0x86, 0x07, 0xcf, 0x08, 0x7d, 0x0b, 0xa5, 0xb5, 0x50, 0xe9, 0xe9, 0xba, 0x68,
	0x7b, 0xdb, 0xc1, 0xd9, 0x1e, 0xd6, 0xf5, 0x6b, 0x12, 0x7a, 0x05, 0x95, 0xcb, 0x8f, 0xd8, 0x1f,
	0xae, 0x02, 0xa4, 0xb5, 0x95, 0x6a, 0xd7, 0x52, 0x82, 0xfa, 0x5e, 0xde, 0xf5, 0xa5, 0xed, 0x64,
	0xfc, 0x34, 0xb3, 0xce, 0xec, 0x25, 0x37, 0x9c, 0xde, 0x5f, 0xb7, 0xb2, 0xb1, 0x81, 0x20, 0xd8,
	0x45, 0xb9, 0x56, 0x2f, 0xaa, 0xbf, 0xbf, 0x7b, 0xe4, 0xc7, 0xa2, 0x46, 0x7e, 0x2e, 0x6a, 0xe4,
	0xcf, 0xa2, 0x46, 0xbe, 0xfd, 0xad, 0x1d, 0xf4, 0xf2, 0xf6, 0xc7, 0x70, 0xf1, 0x3f, 0x00, 0x00,
	0xff, 0xff, 0x8a, 0x8b, 0xe1, 0x91, 0x5d, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RecoveryClient is the client API for Recovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecoveryClient interface {
	// scan region meta
	ReadRegionMeta(ctx context.Context, in *ReadRegionMetaRequest, opts ...grpc.CallOption) (Recovery_ReadRegionMetaClient, error)
	RecoveryCmd(ctx context.Context, opts ...grpc.CallOption) (Recovery_RecoveryCmdClient, error)
	CheckRaftStatus(ctx context.Context, in *GetRaftStatusRequest, opts ...grpc.CallOption) (*GetRaftStatusResponse, error)
	ResolvedKvData(ctx context.Context, in *ResolvedRequest, opts ...grpc.CallOption) (*ResolvedResponse, error)
}

type recoveryClient struct {
	cc *grpc.ClientConn
}

func NewRecoveryClient(cc *grpc.ClientConn) RecoveryClient {
	return &recoveryClient{cc}
}

func (c *recoveryClient) ReadRegionMeta(ctx context.Context, in *ReadRegionMetaRequest, opts ...grpc.CallOption) (Recovery_ReadRegionMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Recovery_serviceDesc.Streams[0], "/recovery.recovery/ReadRegionMeta", opts...)
	if err != nil {
		return nil, err
	}
	x := &recoveryReadRegionMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Recovery_ReadRegionMetaClient interface {
	Recv() (*ReadRegionMetaResponse, error)
	grpc.ClientStream
}

type recoveryReadRegionMetaClient struct {
	grpc.ClientStream
}

func (x *recoveryReadRegionMetaClient) Recv() (*ReadRegionMetaResponse, error) {
	m := new(ReadRegionMetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *recoveryClient) RecoveryCmd(ctx context.Context, opts ...grpc.CallOption) (Recovery_RecoveryCmdClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Recovery_serviceDesc.Streams[1], "/recovery.recovery/RecoveryCmd", opts...)
	if err != nil {
		return nil, err
	}
	x := &recoveryRecoveryCmdClient{stream}
	return x, nil
}

type Recovery_RecoveryCmdClient interface {
	Send(*RecoveryCmdRequest) error
	CloseAndRecv() (*RecoveryCmdResponse, error)
	grpc.ClientStream
}

type recoveryRecoveryCmdClient struct {
	grpc.ClientStream
}

func (x *recoveryRecoveryCmdClient) Send(m *RecoveryCmdRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *recoveryRecoveryCmdClient) CloseAndRecv() (*RecoveryCmdResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RecoveryCmdResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *recoveryClient) CheckRaftStatus(ctx context.Context, in *GetRaftStatusRequest, opts ...grpc.CallOption) (*GetRaftStatusResponse, error) {
	out := new(GetRaftStatusResponse)
	err := c.cc.Invoke(ctx, "/recovery.recovery/CheckRaftStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recoveryClient) ResolvedKvData(ctx context.Context, in *ResolvedRequest, opts ...grpc.CallOption) (*ResolvedResponse, error) {
	out := new(ResolvedResponse)
	err := c.cc.Invoke(ctx, "/recovery.recovery/ResolvedKvData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecoveryServer is the server API for Recovery service.
type RecoveryServer interface {
	// scan region meta
	ReadRegionMeta(*ReadRegionMetaRequest, Recovery_ReadRegionMetaServer) error
	RecoveryCmd(Recovery_RecoveryCmdServer) error
	CheckRaftStatus(context.Context, *GetRaftStatusRequest) (*GetRaftStatusResponse, error)
	ResolvedKvData(context.Context, *ResolvedRequest) (*ResolvedResponse, error)
}

// UnimplementedRecoveryServer can be embedded to have forward compatible implementations.
type UnimplementedRecoveryServer struct {
}

func (*UnimplementedRecoveryServer) ReadRegionMeta(req *ReadRegionMetaRequest, srv Recovery_ReadRegionMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadRegionMeta not implemented")
}
func (*UnimplementedRecoveryServer) RecoveryCmd(srv Recovery_RecoveryCmdServer) error {
	return status.Errorf(codes.Unimplemented, "method RecoveryCmd not implemented")
}
func (*UnimplementedRecoveryServer) CheckRaftStatus(ctx context.Context, req *GetRaftStatusRequest) (*GetRaftStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRaftStatus not implemented")
}
func (*UnimplementedRecoveryServer) ResolvedKvData(ctx context.Context, req *ResolvedRequest) (*ResolvedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolvedKvData not implemented")
}

func RegisterRecoveryServer(s *grpc.Server, srv RecoveryServer) {
	s.RegisterService(&_Recovery_serviceDesc, srv)
}

func _Recovery_ReadRegionMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRegionMetaRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RecoveryServer).ReadRegionMeta(m, &recoveryReadRegionMetaServer{stream})
}

type Recovery_ReadRegionMetaServer interface {
	Send(*ReadRegionMetaResponse) error
	grpc.ServerStream
}

type recoveryReadRegionMetaServer struct {
	grpc.ServerStream
}

func (x *recoveryReadRegionMetaServer) Send(m *ReadRegionMetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Recovery_RecoveryCmd_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RecoveryServer).RecoveryCmd(&recoveryRecoveryCmdServer{stream})
}

type Recovery_RecoveryCmdServer interface {
	SendAndClose(*RecoveryCmdResponse) error
	Recv() (*RecoveryCmdRequest, error)
	grpc.ServerStream
}

type recoveryRecoveryCmdServer struct {
	grpc.ServerStream
}

func (x *recoveryRecoveryCmdServer) SendAndClose(m *RecoveryCmdResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *recoveryRecoveryCmdServer) Recv() (*RecoveryCmdRequest, error) {
	m := new(RecoveryCmdRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Recovery_CheckRaftStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRaftStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecoveryServer).CheckRaftStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recovery.recovery/CheckRaftStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecoveryServer).CheckRaftStatus(ctx, req.(*GetRaftStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recovery_ResolvedKvData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolvedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecoveryServer).ResolvedKvData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recovery.recovery/ResolvedKvData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecoveryServer).ResolvedKvData(ctx, req.(*ResolvedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Recovery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recovery.recovery",
	HandlerType: (*RecoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckRaftStatus",
			Handler:    _Recovery_CheckRaftStatus_Handler,
		},
		{
			MethodName: "ResolvedKvData",
			Handler:    _Recovery_ResolvedKvData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadRegionMeta",
			Handler:       _Recovery_ReadRegionMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecoveryCmd",
			Handler:       _Recovery_RecoveryCmd_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "recoverypb.proto",
}

func (m *ReadRegionMetaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadRegionMetaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadRegionMetaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Workdone {
		i--
		if m.Workdone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReadRegionMetaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadRegionMetaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadRegionMetaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EndKey) > 0 {
		i -= len(m.EndKey)
		copy(dAtA[i:], m.EndKey)
		i = encodeVarintRecoverypb(dAtA, i, uint64(len(m.EndKey)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.StartKey) > 0 {
		i -= len(m.StartKey)
		copy(dAtA[i:], m.StartKey)
		i = encodeVarintRecoverypb(dAtA, i, uint64(len(m.StartKey)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Tombstone {
		i--
		if m.Tombstone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Version != 0 {
		i = encodeVarintRecoverypb(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x28
	}
	if m.Term != 0 {
		i = encodeVarintRecoverypb(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x20
	}
	if m.LastIndex != 0 {
		i = encodeVarintRecoverypb(dAtA, i, uint64(m.LastIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.AppliedIndex != 0 {
		i = encodeVarintRecoverypb(dAtA, i, uint64(m.AppliedIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.RegionId != 0 {
		i = encodeVarintRecoverypb(dAtA, i, uint64(m.RegionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecoveryCmdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecoveryCmdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecoveryCmdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Tombstone {
		i--
		if m.Tombstone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.AsLeader {
		i--
		if m.AsLeader {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Term != 0 {
		i = encodeVarintRecoverypb(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x10
	}
	if m.RegionId != 0 {
		i = encodeVarintRecoverypb(dAtA, i, uint64(m.RegionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecoveryCmdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecoveryCmdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecoveryCmdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Done {
		i--
		if m.Done {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRaftStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRaftStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRaftStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommitIndex {
		i--
		if m.CommitIndex {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRaftStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRaftStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRaftStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Done {
		i--
		if m.Done {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResolvedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolvedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolvedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ResolvedTs != 0 {
		i = encodeVarintRecoverypb(dAtA, i, uint64(m.ResolvedTs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResolvedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolvedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolvedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Done {
		i--
		if m.Done {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRecoverypb(dAtA []byte, offset int, v uint64) int {
	offset -= sovRecoverypb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReadRegionMetaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Workdone {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReadRegionMetaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegionId != 0 {
		n += 1 + sovRecoverypb(uint64(m.RegionId))
	}
	if m.AppliedIndex != 0 {
		n += 1 + sovRecoverypb(uint64(m.AppliedIndex))
	}
	if m.LastIndex != 0 {
		n += 1 + sovRecoverypb(uint64(m.LastIndex))
	}
	if m.Term != 0 {
		n += 1 + sovRecoverypb(uint64(m.Term))
	}
	if m.Version != 0 {
		n += 1 + sovRecoverypb(uint64(m.Version))
	}
	if m.Tombstone {
		n += 2
	}
	l = len(m.StartKey)
	if l > 0 {
		n += 1 + l + sovRecoverypb(uint64(l))
	}
	l = len(m.EndKey)
	if l > 0 {
		n += 1 + l + sovRecoverypb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecoveryCmdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegionId != 0 {
		n += 1 + sovRecoverypb(uint64(m.RegionId))
	}
	if m.Term != 0 {
		n += 1 + sovRecoverypb(uint64(m.Term))
	}
	if m.AsLeader {
		n += 2
	}
	if m.Tombstone {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecoveryCmdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Done {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRaftStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommitIndex {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRaftStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Done {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResolvedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResolvedTs != 0 {
		n += 1 + sovRecoverypb(uint64(m.ResolvedTs))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResolvedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Done {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRecoverypb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRecoverypb(x uint64) (n int) {
	return sovRecoverypb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReadRegionMetaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecoverypb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadRegionMetaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadRegionMetaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workdone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Workdone = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRecoverypb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecoverypb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadRegionMetaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecoverypb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadRegionMetaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadRegionMetaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedIndex", wireType)
			}
			m.AppliedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppliedIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastIndex", wireType)
			}
			m.LastIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tombstone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tombstone = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecoverypb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecoverypb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = append(m.StartKey[:0], dAtA[iNdEx:postIndex]...)
			if m.StartKey == nil {
				m.StartKey = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecoverypb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecoverypb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = append(m.EndKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EndKey == nil {
				m.EndKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecoverypb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecoverypb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecoveryCmdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecoverypb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecoveryCmdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecoveryCmdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsLeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AsLeader = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tombstone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tombstone = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRecoverypb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecoverypb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecoveryCmdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecoverypb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecoveryCmdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecoveryCmdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Done", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Done = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRecoverypb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecoverypb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRaftStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecoverypb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRaftStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRaftStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitIndex", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommitIndex = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRecoverypb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecoverypb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRaftStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecoverypb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRaftStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRaftStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Done", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Done = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRecoverypb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecoverypb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolvedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecoverypb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolvedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolvedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedTs", wireType)
			}
			m.ResolvedTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolvedTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecoverypb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecoverypb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolvedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecoverypb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolvedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolvedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Done", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Done = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRecoverypb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecoverypb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecoverypb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecoverypb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecoverypb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecoverypb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRecoverypb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRecoverypb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRecoverypb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecoverypb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRecoverypb = fmt.Errorf("proto: unexpected end of group")
)
