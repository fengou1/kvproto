// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: recoverdatapb.proto

package recovery

import (
	"context"
	"fmt"
	"io"
	"math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// check if raft fsm applied index >= GetRaftStatusRequest.commit_index
type GetRaftStatusRequest struct {
	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// TODO: Maybe here is last_index
	CommitIndex          uint64   `protobuf:"varint,2,opt,name=commit_index,json=commitIndex,proto3" json:"commit_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRaftStatusRequest) Reset()         { *m = GetRaftStatusRequest{} }
func (m *GetRaftStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetRaftStatusRequest) ProtoMessage()    {}
func (*GetRaftStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6853a92ee81110ca, []int{0}
}
func (m *GetRaftStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRaftStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRaftStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRaftStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRaftStatusRequest.Merge(m, src)
}
func (m *GetRaftStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRaftStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRaftStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRaftStatusRequest proto.InternalMessageInfo

func (m *GetRaftStatusRequest) GetRegionId() uint64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *GetRaftStatusRequest) GetCommitIndex() uint64 {
	if m != nil {
		return m.CommitIndex
	}
	return 0
}

// all peers aligned applied_index >= commit_index.
type GetRaftStatusResponse struct {
	Aligned              bool     `protobuf:"varint,1,opt,name=aligned,proto3" json:"aligned,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRaftStatusResponse) Reset()         { *m = GetRaftStatusResponse{} }
func (m *GetRaftStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GetRaftStatusResponse) ProtoMessage()    {}
func (*GetRaftStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6853a92ee81110ca, []int{1}
}
func (m *GetRaftStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRaftStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRaftStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRaftStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRaftStatusResponse.Merge(m, src)
}
func (m *GetRaftStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRaftStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRaftStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRaftStatusResponse proto.InternalMessageInfo

func (m *GetRaftStatusResponse) GetAligned() bool {
	if m != nil {
		return m.Aligned
	}
	return false
}

type ResolveRequest struct {
	ResolvedTs           uint64   `protobuf:"varint,1,opt,name=resolved_ts,json=resolvedTs,proto3" json:"resolved_ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolveRequest) Reset()         { *m = ResolveRequest{} }
func (m *ResolveRequest) String() string { return proto.CompactTextString(m) }
func (*ResolveRequest) ProtoMessage()    {}
func (*ResolveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6853a92ee81110ca, []int{2}
}
func (m *ResolveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveRequest.Merge(m, src)
}
func (m *ResolveRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResolveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveRequest proto.InternalMessageInfo

func (m *ResolveRequest) GetResolvedTs() uint64 {
	if m != nil {
		return m.ResolvedTs
	}
	return 0
}

type ResolveResponse struct {
	Done                 bool     `protobuf:"varint,1,opt,name=done,proto3" json:"done,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolveResponse) Reset()         { *m = ResolveResponse{} }
func (m *ResolveResponse) String() string { return proto.CompactTextString(m) }
func (*ResolveResponse) ProtoMessage()    {}
func (*ResolveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6853a92ee81110ca, []int{3}
}
func (m *ResolveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveResponse.Merge(m, src)
}
func (m *ResolveResponse) XXX_Size() int {
	return m.Size()
}
func (m *ResolveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveResponse proto.InternalMessageInfo

func (m *ResolveResponse) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func init() {
	proto.RegisterType((*GetRaftStatusRequest)(nil), "recovery.GetRaftStatusRequest")
	proto.RegisterType((*GetRaftStatusResponse)(nil), "recovery.GetRaftStatusResponse")
	proto.RegisterType((*ResolveRequest)(nil), "recovery.ResolveRequest")
	proto.RegisterType((*ResolveResponse)(nil), "recovery.ResolveResponse")
}

func init() { proto.RegisterFile("recoverdatapb.proto", fileDescriptor_6853a92ee81110ca) }

var fileDescriptor_6853a92ee81110ca = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0x17, 0x19, 0x5a, 0xcf, 0xd4, 0x41, 0x9c, 0x50, 0x2b, 0x74, 0x5a, 0x10, 0xbc, 0xaa,
	0x4c, 0xdf, 0x40, 0x45, 0x19, 0xde, 0xd5, 0xe1, 0x6d, 0xc9, 0x9a, 0x63, 0x2d, 0x6e, 0x4d, 0x4d,
	0xd2, 0xa2, 0x6f, 0xe2, 0x23, 0xec, 0x51, 0xbc, 0xf4, 0xd2, 0x4b, 0xa9, 0x2f, 0x22, 0x6b, 0xda,
	0x0d, 0x65, 0xde, 0xfd, 0xf9, 0x7e, 0xce, 0x9f, 0x3f, 0x27, 0xb0, 0x2b, 0x31, 0x12, 0x05, 0x4a,
	0xce, 0x34, 0xcb, 0xc6, 0x7e, 0x26, 0x85, 0x16, 0xd4, 0xaa, 0xe1, 0xab, 0xd3, 0x8b, 0x45, 0x2c,
	0x2a, 0x78, 0x3a, 0x57, 0xc6, 0x77, 0xba, 0x32, 0x57, 0xba, 0x92, 0x06, 0x78, 0xf7, 0xd0, 0xbb,
	0x41, 0x1d, 0xb0, 0x07, 0x7d, 0xa7, 0x99, 0xce, 0x55, 0x80, 0xcf, 0x39, 0x2a, 0x4d, 0x0f, 0x60,
	0x53, 0x62, 0x9c, 0x88, 0x34, 0x4c, 0xb8, 0x4d, 0x0e, 0xc9, 0x49, 0x3b, 0xb0, 0x0c, 0x18, 0x72,
	0x7a, 0x04, 0x5b, 0x91, 0x98, 0x4e, 0x13, 0x1d, 0x26, 0x29, 0xc7, 0x17, 0x7b, 0xad, 0xf2, 0x3b,
	0x86, 0x0d, 0xe7, 0xc8, 0x1b, 0xc0, 0xde, 0x9f, 0x5c, 0x95, 0x89, 0x54, 0x21, 0xb5, 0x61, 0x83,
	0x4d, 0x92, 0x38, 0x45, 0x13, 0x6b, 0x05, 0xcd, 0xd1, 0x1b, 0xc0, 0x4e, 0x80, 0x4a, 0x4c, 0x0a,
	0x6c, 0x4a, 0xf4, 0xa1, 0x23, 0x0d, 0xe1, 0xa1, 0x56, 0x75, 0x0d, 0x68, 0xd0, 0x48, 0x79, 0xc7,
	0xd0, 0x5d, 0x8c, 0xd4, 0xf9, 0x14, 0xda, 0x5c, 0xa4, 0x58, 0x87, 0x57, 0xfa, 0x6c, 0x46, 0x60,
	0xb1, 0x18, 0x3a, 0x82, 0xee, 0xe5, 0x23, 0x46, 0x4f, 0xcb, 0x6e, 0xd4, 0xf5, 0x1b, 0xd7, 0x5f,
	0xb5, 0x0c, 0xa7, 0xff, 0xaf, 0x6f, 0x2e, 0xf5, 0x5a, 0xf4, 0x1a, 0xb6, 0xeb, 0x26, 0xb7, 0xc5,
	0x15, 0xd3, 0x8c, 0xda, 0xcb, 0x99, 0xdf, 0xaf, 0x72, 0xf6, 0x57, 0x38, 0x4d, 0xce, 0x45, 0xef,
	0x73, 0x66, 0x91, 0xf7, 0xd2, 0x25, 0x1f, 0xa5, 0x4b, 0xbe, 0x4a, 0x97, 0xbc, 0x7d, 0xbb, 0xad,
	0xf1, 0x7a, 0xf5, 0x59, 0xe7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x26, 0xba, 0xf3, 0xf4,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RecoveryClient is the client API for Recovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecoveryClient interface {
	// check raft status
	CheckRaftStatus(ctx context.Context, in *GetRaftStatusRequest, opts ...grpc.CallOption) (*GetRaftStatusResponse, error)
	// execute delete data from kv db
	ResolveKvData(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error)
}

type recoveryClient struct {
	cc *grpc.ClientConn
}

func NewRecoveryClient(cc *grpc.ClientConn) RecoveryClient {
	return &recoveryClient{cc}
}

func (c *recoveryClient) CheckRaftStatus(ctx context.Context, in *GetRaftStatusRequest, opts ...grpc.CallOption) (*GetRaftStatusResponse, error) {
	out := new(GetRaftStatusResponse)
	err := c.cc.Invoke(ctx, "/recovery.recovery/CheckRaftStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recoveryClient) ResolveKvData(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error) {
	out := new(ResolveResponse)
	err := c.cc.Invoke(ctx, "/recovery.recovery/ResolveKvData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecoveryServer is the server API for Recovery service.
type RecoveryServer interface {
	// check raft status
	CheckRaftStatus(context.Context, *GetRaftStatusRequest) (*GetRaftStatusResponse, error)
	// execute delete data from kv db
	ResolveKvData(context.Context, *ResolveRequest) (*ResolveResponse, error)
}

// UnimplementedRecoveryServer can be embedded to have forward compatible implementations.
type UnimplementedRecoveryServer struct {
}

func (*UnimplementedRecoveryServer) CheckRaftStatus(ctx context.Context, req *GetRaftStatusRequest) (*GetRaftStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRaftStatus not implemented")
}
func (*UnimplementedRecoveryServer) ResolveKvData(ctx context.Context, req *ResolveRequest) (*ResolveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveKvData not implemented")
}

func RegisterRecoveryServer(s *grpc.Server, srv RecoveryServer) {
	s.RegisterService(&_Recovery_serviceDesc, srv)
}

func _Recovery_CheckRaftStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRaftStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecoveryServer).CheckRaftStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recovery.recovery/CheckRaftStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecoveryServer).CheckRaftStatus(ctx, req.(*GetRaftStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recovery_ResolveKvData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecoveryServer).ResolveKvData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recovery.recovery/ResolveKvData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecoveryServer).ResolveKvData(ctx, req.(*ResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Recovery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recovery.recovery",
	HandlerType: (*RecoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckRaftStatus",
			Handler:    _Recovery_CheckRaftStatus_Handler,
		},
		{
			MethodName: "ResolveKvData",
			Handler:    _Recovery_ResolveKvData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recoverdatapb.proto",
}

func (m *GetRaftStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRaftStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRaftStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommitIndex != 0 {
		i = encodeVarintRecoverdatapb(dAtA, i, uint64(m.CommitIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.RegionId != 0 {
		i = encodeVarintRecoverdatapb(dAtA, i, uint64(m.RegionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRaftStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRaftStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRaftStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aligned {
		i--
		if m.Aligned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResolveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ResolvedTs != 0 {
		i = encodeVarintRecoverdatapb(dAtA, i, uint64(m.ResolvedTs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResolveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Done {
		i--
		if m.Done {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRecoverdatapb(dAtA []byte, offset int, v uint64) int {
	offset -= sovRecoverdatapb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetRaftStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegionId != 0 {
		n += 1 + sovRecoverdatapb(uint64(m.RegionId))
	}
	if m.CommitIndex != 0 {
		n += 1 + sovRecoverdatapb(uint64(m.CommitIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRaftStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aligned {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResolveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResolvedTs != 0 {
		n += 1 + sovRecoverdatapb(uint64(m.ResolvedTs))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResolveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Done {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRecoverdatapb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRecoverdatapb(x uint64) (n int) {
	return sovRecoverdatapb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetRaftStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecoverdatapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRaftStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRaftStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverdatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitIndex", wireType)
			}
			m.CommitIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverdatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecoverdatapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecoverdatapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRaftStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecoverdatapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRaftStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRaftStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aligned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverdatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Aligned = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRecoverdatapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecoverdatapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecoverdatapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedTs", wireType)
			}
			m.ResolvedTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverdatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolvedTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecoverdatapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecoverdatapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecoverdatapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Done", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecoverdatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Done = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRecoverdatapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecoverdatapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecoverdatapb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecoverdatapb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecoverdatapb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecoverdatapb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecoverdatapb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRecoverdatapb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRecoverdatapb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRecoverdatapb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecoverdatapb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRecoverdatapb = fmt.Errorf("proto: unexpected end of group")
)
